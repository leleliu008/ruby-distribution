name: publish ruby-distribution

on:
  workflow_dispatch:

jobs:

  check:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4

      - id:  check-if-build
        run: |
          set -ex

          cat > QUERY <<EOF
          {
            repository(owner: "${{ github.repository_owner }}", name: "ruby-distribution") {
                latestRelease {
                  name
                }
            }
          }
          EOF

          LATEST_RELEASE_VERSION="$(gh api graphql -f "query=$(cat QUERY)" --jq .data.repository.latestRelease.name)"

          RELEASE_VERSION="$(./build.sh ruby-version)"

          if [ "$LATEST_RELEASE_VERSION" = "$RELEASE_VERSION" ] ; then
              RELEASE=no
          else
              RELEASE=yes
          fi

          printf 'RELEASE=%s\n' "$RELEASE" >> "$GITHUB_OUTPUT"
          printf 'RELEASE_VERSION=%s\n' "$RELEASE_VERSION" >> "$GITHUB_OUTPUT"


    outputs:
      if-new-release:  ${{ steps.check-if-build.outputs.RELEASE }}
      release-version: ${{ steps.check-if-build.outputs.RELEASE_VERSION }}


  dragonflybsd:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target-version: ['6.4']

    steps:
      - uses: actions/checkout@v4

      - uses: vmactions/dragonflybsd-vm@v1
        with:
          release: "${{ matrix.target-version }}.0"
          usesh: true
          sync: rsync
          copyback: true
          run: ./bundle.sh ${{ needs.check.outputs.release-version }} dragonflybsd-${{ matrix.target-version }}-x86_64

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-dragonflybsd-${{ matrix.target-version }}-x86_64.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-dragonflybsd-${{ matrix.target-version }}-x86_64.tar.xz


  freebsd:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target-version: ['14.2', '14.1', '14.0', '13.4', '13.3', '13.2']

    steps:
      - uses: actions/checkout@v4

      - uses: cross-platform-actions/action@master
        with:
          operating_system: freebsd
          version: ${{ matrix.target-version }}
          shell: bash
          run: ./bundle.sh ${{ needs.check.outputs.release-version }} freebsd-${{ matrix.target-version }}-amd64

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-freebsd-${{ matrix.target-version }}-amd64.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-freebsd-${{ matrix.target-version }}-amd64.tar.xz


  openbsd:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target-version: ['7.6', '7.5', '7.4', '7.3', '7.2']

    steps:
      - uses: actions/checkout@v4

      - uses: cross-platform-actions/action@master
        with:
          operating_system: openbsd
          version: ${{ matrix.target-version }}
          shell: bash
          run: ./bundle.sh ${{ needs.check.outputs.release-version }} openbsd-${{ matrix.target-version }}-amd64

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-openbsd-${{ matrix.target-version }}-amd64.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-openbsd-${{ matrix.target-version }}-amd64.tar.xz


  netbsd:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target-version: ['9.4', '9.3', '9.2']
          #target-version: ['10.1', '10.0', '9.4', '9.3', '9.2']

    steps:
      - uses: actions/checkout@v4

      - run: curl -LO https://curl.se/ca/cacert.pem

      - uses: cross-platform-actions/action@v0.27.0
        with:
          operating_system: netbsd
          version: ${{ matrix.target-version }}
          shell: bash
          run: ./bundle.sh ${{ needs.check.outputs.release-version }} netbsd-${{ matrix.target-version }}-amd64

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-netbsd-${{ matrix.target-version }}-amd64.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-netbsd-${{ matrix.target-version }}-amd64.tar.xz


  macos-arm64:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: macos-14

    strategy:
      fail-fast: false
      matrix:
        target-version: ['10.15', '11.0', '12.0', '13.0', '14.0', '15.0']

    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.target-version }}

    steps:
      - uses: actions/checkout@v4

      - run: ./bundle.sh ${{ needs.check.outputs.release-version }} macos-${{ matrix.target-version }}-arm64

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-macos-${{ matrix.target-version }}-arm64.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-macos-${{ matrix.target-version }}-arm64.tar.xz


  macos-x86_64:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: macos-13

    strategy:
      fail-fast: false
      matrix:
        target-version: ['10.15', '11.0', '12.0', '13.0', '14.0', '15.0']

    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.target-version }}

    steps:
      - uses: actions/checkout@v4

      - run: ./bundle.sh ${{ needs.check.outputs.release-version }} macos-${{ matrix.target-version }}-x86_64

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-macos-${{ matrix.target-version }}-x86_64.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-macos-${{ matrix.target-version }}-x86_64.tar.xz


  linux-x86_64:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - run: ./bundle.sh ${{ needs.check.outputs.release-version }} linux-any-x86_64

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-linux-any-x86_64.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-linux-any-x86_64.tar.xz


  linux-loongarch64:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - run: curl -LO https://raw.githubusercontent.com/alpinelinux/alpine-chroot-install/master/alpine-chroot-install
      - run: chmod +x alpine-chroot-install
      - run: sudo ./alpine-chroot-install -d /alpine -a loongarch64
      - run: /alpine/enter-chroot /bin/sh bundle.sh ${{ needs.check.outputs.release-version }} linux-any-loongarch64

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-linux-any-loongarch64.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-linux-any-loongarch64.tar.xz


  linux-other:
    needs: check
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target-arch: [aarch64, ppc64le, riscv64, s390x, armhf]

    steps:
      - uses: actions/checkout@v4

      - run: |
          case ${{ matrix.target-arch }} in
            x86_64)  X=amd64 ;;
            aarch64) X=arm64 ;;
            ppc64le) X=ppc64el ;;
            *)       X=${{ matrix.target-arch }}
          esac
          curl -LO https://cdimage.ubuntu.com/ubuntu-base/releases/24.04/release/ubuntu-base-24.04.2-base-$X.tar.gz

      - run: install -d ubuntu-rootfs
      - run: tar xf ubuntu-base-24.04.2-base-*.tar.gz -C ubuntu-rootfs

      - run: cp -p /etc/resolv.conf ubuntu-rootfs/etc/
      - run: cp *.sh ubuntu-rootfs/

      - run: sudo mount -o bind  /dev ubuntu-rootfs/dev
      - run: sudo mount -t proc  none ubuntu-rootfs/proc
      - run: sudo mount -t sysfs none ubuntu-rootfs/sys
      - run: sudo mount -t tmpfs none ubuntu-rootfs/tmp

      - run: sudo apt-get -y update
      - run: sudo apt-get -y install qemu-user-static binfmt-support

      - run: update-binfmts --enable

      - run: sudo install -g `id -g` -o `id -u` /usr/bin/qemu-${{ matrix.target-arch }}-static ubuntu-rootfs/

      - run: sudo chroot ubuntu-rootfs /qemu-${{ matrix.target-arch }}-static /bin/sh bundle.sh ${{ needs.check.outputs.release-version }} linux-any-${{ matrix.target-arch }}

      - run: mv ubuntu-rootfs/ruby-${{ needs.check.outputs.release-version }}-linux-any-${{ matrix.target-arch }}.tar.xz .

      - uses: actions/upload-artifact@v4
        with:
          name: ruby-${{ needs.check.outputs.release-version }}-linux-any-${{ matrix.target-arch }}.tar.xz
          path: ruby-${{ needs.check.outputs.release-version }}-linux-any-*.tar.xz



  publish:
    needs: [check, dragonflybsd, freebsd, openbsd, netbsd, macos-arm64, macos-x86_64, linux-loongarch64, linux-x86_64, linux-other]
    if: needs.check.outputs.if-new-release == 'yes'

    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: .
          merge-multiple: true

      - run: ls -a

      - run: |
          cat > notes.md <<EOF
          ## config

          \`\`\`yaml
          $(./build.sh config)
          \`\`\`

          ## sha256sum

          \`\`\`
          $(sha256sum *.tar.xz)
          \`\`\`
          EOF

      - run: gh release create ${{ needs.check.outputs.release-version }} *.tar.xz --title ${{ needs.check.outputs.release-version }} --notes-file notes.md
